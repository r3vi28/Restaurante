@page "/rol/crear"
@page "/rol/editar/{Id:int}"
<EditForm Model="@Reservacion" OnValidSubmit="Send">
<h1>@Titulo</h1>
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label>Cliente:</label>
        <InputNumber class="form-control" @bind-Value="Reservacion.ClienteId"></InputNumber>
    </div>
    <div class="form-group">
        <label>Fecha:</label>
        <InputDate class="form-control" @bind-Value="Reservacion.Fecha"></InputDate>
    </div>
    <div class="form-group">
        <label>Numero de Personas:</label>
        <InputNumber class="form-control" @bind-Value="Reservacion.NumeroPersonas"></InputNumber>
    </div>
    <div class="form-group">
        <label>Mesa: </label>
        <InputNumber class="form-control" @bind-Value="Reservacion.MesaId"></InputNumber>
    </div>
    
    
    <button type="submit" class="mt-2 btn btn-success  btn-with-margin">Ok</button>
</EditForm>

@code
{
[Parameter]
public int Id { get; set; } = 0;

public string Titulo => Id>0? "Editar rol":"Crear rol";

public ReservacionUpdateRequest Reservacion { get; set; } = new ReservacionUpdateRequest();

protected override async Task OnInitializedAsync()
{
    if(Id!=0){
        var resultado = await reservacionesManager.GetByIdAsync(Id);
        if(resultado.Succeeded){
            Reservacion.Id = resultado.Data.Id;
            Reservacion.ClienteId = resultado.Data.ClienteId;
            Reservacion.Fecha = resultado.Data.Fecha;
            Reservacion.NumeroPersonas = resultado.Data.NumeroPersonas;
            Reservacion.MesaId = resultado.Data.MesaId;
            StateHasChanged();
        }
    }
}
        
    public async void Send()
    {
            var resultado = await reservacionesManager.CreateAsync(Reservacion);
            if(resultado.Succeeded) urlHelper.NavigateTo("/reservaciones");
    }
}
